# -*- coding: utf-8 -*-
"""P3_Sentiment_analysis_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OWCnSyFDeaDXKvEJls0E9K7pmFYO9ozJ
"""

# app.py
!pip install streamlit

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud
import string
import re
import nltk
from nltk.corpus import stopwords
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report, confusion_matrix

nltk.download('stopwords')
stop_words = set(stopwords.words('english'))

# --- Utility Functions ---
def label_sentiment(rating):
    if rating <= 2:
        return "Negative"
    elif rating == 3:
        return "Neutral"
    else:
        return "Positive"

def clean_text(text):
    text = text.lower()
    text = re.sub(r"http\S+|www\S+|https\S+", '', text)
    text = re.sub(r'\@w+|\#','', text)
    text = text.translate(str.maketrans('', '', string.punctuation))
    tokens = text.split()
    tokens = [word for word in tokens if word not in stop_words]
    return " ".join(tokens)

def plot_wordcloud(data, title):
    text = " ".join(data)
    wc = WordCloud(width=800, height=400, background_color="white").generate(text)
    fig, ax = plt.subplots(figsize=(10, 5))
    ax.imshow(wc, interpolation='bilinear')
    ax.axis("off")
    ax.set_title(title)
    st.pyplot(fig)

def plot_conf_matrix(y_true, y_pred, title):
    cm = confusion_matrix(y_true, y_pred, labels=["Negative", "Neutral", "Positive"])
    fig, ax = plt.subplots()
    sns.heatmap(cm, annot=True, fmt="d", cmap="Blues",
                xticklabels=["Negative", "Neutral", "Positive"],
                yticklabels=["Negative", "Neutral", "Positive"],
                ax=ax)
    ax.set_xlabel("Predicted")
    ax.set_ylabel("Actual")
    ax.set_title(title)
    st.pyplot(fig)

# --- Load & Prepare Data ---
st.title("📊 Customer Review Sentiment Analysis")

uploaded_file = st.file_uploader("Upload Excel File", type=["xlsx"])
if uploaded_file:
    df = pd.read_excel(uploaded_file)

    # Combine and clean
    df["review"] = df["title"].astype(str) + " " + df["body"].astype(str)
    df["sentiment"] = df["rating"].apply(label_sentiment)
    df["clean_review"] = df["review"].apply(clean_text)

    st.subheader("🔍 Data Preview")
    st.dataframe(df[["rating", "sentiment", "review"]].head())

    # Visuals
    st.subheader("📈 Rating Distribution")
    fig1, ax1 = plt.subplots()
    sns.countplot(x='rating', data=df, palette="viridis", ax=ax1)
    st.pyplot(fig1)

    st.subheader("📊 Sentiment Distribution")
    fig2, ax2 = plt.subplots()
    sns.countplot(x='sentiment', data=df, order=["Negative", "Neutral", "Positive"], palette='pastel', ax=ax2)
    st.pyplot(fig2)

    st.subheader("☁ Word Clouds")
    col1, col2 = st.columns(2)
    with col1:
        plot_wordcloud(df[df["rating"] == 1]["clean_review"], "Word Cloud - 1 Star")
    with col2:
        plot_wordcloud(df[df["rating"] == 5]["clean_review"], "Word Cloud - 5 Star")

    col3, col4 = st.columns(2)
    with col3:
        plot_wordcloud(df[df["sentiment"] == "Positive"]["clean_review"], "Word Cloud - Positive")
    with col4:
        plot_wordcloud(df[df["sentiment"] == "Negative"]["clean_review"], "Word Cloud - Negative")

    # Vectorize & Train Models
    vectorizer = TfidfVectorizer(max_features=5000)
    X = vectorizer.fit_transform(df["clean_review"])
    y = df["sentiment"]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)

    # Logistic Regression
    log_model = LogisticRegression(max_iter=1000)
    log_model.fit(X_train, y_train)
    log_preds = log_model.predict(X_test)

    # Naive Bayes
    nb_model = MultinomialNB()
    nb_model.fit(X_train, y_train)
    nb_preds = nb_model.predict(X_test)

    # Evaluation
    st.subheader("📋 Model Evaluation - Logistic Regression")
    st.text(classification_report(y_test, log_preds))
    plot_conf_matrix(y_test, log_preds, "Logistic Regression")

    st.subheader("📋 Model Evaluation - Naive Bayes")
    st.text(classification_report(y_test, nb_preds))
    plot_conf_matrix(y_test, nb_preds, "Naive Bayes")

    # Prediction Box
    st.subheader("✍️ Predict Sentiment for Custom Review")
    user_input = st.text_area("Enter your review here:")
    if st.button("Predict Sentiment"):
        if user_input.strip() == "":
            st.warning("Please enter a review.")
        else:
            clean_input = clean_text(user_input)
            input_vector = vectorizer.transform([clean_input])
            pred_sentiment = log_model.predict(input_vector)[0]
            st.success(f"Predicted Sentiment: **{pred_sentiment}**")
else:
    st.info("👆 Please upload a dataset to begin.")